{"ast":null,"code":"var _jsxFileName = \"/home/gwl/Reactjs/react-training/src/Component/Shared/Button/Button.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Button.module.scss\";\n/**\n * this is button field component using in shared\n * @param {string} buttonType \n * @param {string} buttonName\n * @param {string} buttonClass \n * @param {func} handleChange\n * @param {bool} index\n * @param {bool} status\n * @param {bool} disabled\n * @returns element\n */\n\nconst Button = props => {\n  const buttonType = props.buttonType,\n        buttonName = props.buttonName,\n        buttonClass = props.buttonClass,\n        handleOnClick = props.handleOnClick,\n        index = props.index,\n        status = props.status,\n        disabled = props.disabled;\n  return React.createElement(\"button\", {\n    type: buttonType,\n    name: buttonName,\n    className: styles[buttonClass],\n    onClick: e => handleOnClick(e, index, status),\n    disabled: disabled,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, buttonName);\n}; // set default props\n\n\nButton.defaultProps = {\n  buttonType: \"\",\n  buttonName: \"\",\n  buttonClass: \"\",\n  handleOnClick: () => {},\n  index: \"\",\n  status: true,\n  disabled: false\n}; // proptypes validation\n\nButton.propTypes = {\n  buttonType: PropTypes.string.isRequired,\n  buttonName: PropTypes.string,\n  buttonClass: PropTypes.string,\n  handleOnClick: PropTypes.func,\n  status: PropTypes.bool,\n  disabled: PropTypes.bool.isRequired\n};\nexport default Button;","map":{"version":3,"sources":["/home/gwl/Reactjs/react-training/src/Component/Shared/Button/Button.jsx"],"names":["React","PropTypes","styles","Button","props","buttonType","buttonName","buttonClass","handleOnClick","index","status","disabled","e","defaultProps","propTypes","string","isRequired","func","bool"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA;;;;;;;;;;;;AAWA,MAAMC,MAAM,GAAGC,KAAK,IAAI;AAAA,QAEhBC,UAFgB,GAShBD,KATgB,CAEhBC,UAFgB;AAAA,QAGhBC,UAHgB,GAShBF,KATgB,CAGhBE,UAHgB;AAAA,QAIhBC,WAJgB,GAShBH,KATgB,CAIhBG,WAJgB;AAAA,QAKhBC,aALgB,GAShBJ,KATgB,CAKhBI,aALgB;AAAA,QAMhBC,KANgB,GAShBL,KATgB,CAMhBK,KANgB;AAAA,QAOhBC,MAPgB,GAShBN,KATgB,CAOhBM,MAPgB;AAAA,QAQhBC,QARgB,GAShBP,KATgB,CAQhBO,QARgB;AAUpB,SACI;AACI,IAAA,IAAI,EAAEN,UADV;AAEI,IAAA,IAAI,EAAEC,UAFV;AAGI,IAAA,SAAS,EAAEJ,MAAM,CAACK,WAAD,CAHrB;AAII,IAAA,OAAO,EAAEK,CAAC,IAAIJ,aAAa,CAACI,CAAD,EAAGH,KAAH,EAASC,MAAT,CAJ/B;AAKI,IAAA,QAAQ,EAAEC,QALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOKL,UAPL,CADJ;AAWH,CArBD,C,CAsBA;;;AACAH,MAAM,CAACU,YAAP,GAAsB;AAClBR,EAAAA,UAAU,EAAE,EADM;AAElBC,EAAAA,UAAU,EAAE,EAFM;AAGlBC,EAAAA,WAAW,EAAE,EAHK;AAIlBC,EAAAA,aAAa,EAAG,MAAM,CAAE,CAJN;AAKlBC,EAAAA,KAAK,EAAE,EALW;AAMlBC,EAAAA,MAAM,EAAE,IANU;AAOlBC,EAAAA,QAAQ,EAAE;AAPQ,CAAtB,C,CASA;;AACAR,MAAM,CAACW,SAAP,GAAmB;AACfT,EAAAA,UAAU,EAAEJ,SAAS,CAACc,MAAV,CAAiBC,UADd;AAEfV,EAAAA,UAAU,EAAEL,SAAS,CAACc,MAFP;AAGfR,EAAAA,WAAW,EAAEN,SAAS,CAACc,MAHR;AAIfP,EAAAA,aAAa,EAAEP,SAAS,CAACgB,IAJV;AAKfP,EAAAA,MAAM,EAAET,SAAS,CAACiB,IALH;AAMfP,EAAAA,QAAQ,EAAEV,SAAS,CAACiB,IAAV,CAAeF;AANV,CAAnB;AAQA,eAAeb,MAAf","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Button.module.scss\";\n/**\n * this is button field component using in shared\n * @param {string} buttonType \n * @param {string} buttonName\n * @param {string} buttonClass \n * @param {func} handleChange\n * @param {bool} index\n * @param {bool} status\n * @param {bool} disabled\n * @returns element\n */ \nconst Button = props => {\n    const {\n        buttonType,\n        buttonName,\n        buttonClass,    \n        handleOnClick,\n        index,\n        status,\n        disabled        \n    } = props;\n    return (        \n        <button\n            type={buttonType}\n            name={buttonName}            \n            className={styles[buttonClass]}    \n            onClick={e => handleOnClick(e,index,status)}  \n            disabled={disabled}               \n        >     \n            {buttonName}     \n        </button>        \n    );\n}\n// set default props\nButton.defaultProps = {\n    buttonType: \"\",\n    buttonName: \"\",\n    buttonClass: \"\",    \n    handleOnClick:  () => {},\n    index: \"\",\n    status: true,\n    disabled: false\n}\n// proptypes validation\nButton.propTypes = {\n    buttonType: PropTypes.string.isRequired,\n    buttonName: PropTypes.string,\n    buttonClass: PropTypes.string,    \n    handleOnClick: PropTypes.func,\n    status: PropTypes.bool,\n    disabled: PropTypes.bool.isRequired\n  };\nexport default Button;"]},"metadata":{},"sourceType":"module"}