{"ast":null,"code":"var _jsxFileName = \"/home/gwl/SAMANDAR/react-training/src/Component/ToDo/ToDo.jsx\";\nimport React from \"react\";\nimport styles from \"./ToDo.module.scss\";\nimport Input from \"../Shared/Input\";\nimport Button from \"../Shared/Button\";\nimport ToDoList from \"./ToDoList/ToDoList\";\n/**\n * This component for render todo form todo list\n */\n\n/** Name: Component name\n *  Desc: Component description\n * @param {fun} handleOnClick\n * @param {boolean} activeFilter\n * @returns Element\n */\n\nclass ToDo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.addTodo = (e, index) => {\n      console.log('pooja');\n      alert();\n      e.preventDefault();\n      let todoDataArray = [...this.state.todoDataArray];\n\n      if (index !== -1) {\n        //update todo\n        for (let i = 0; i < todoDataArray.length; i++) {\n          if (i === index) {\n            todoDataArray[i].todo = this.state.todo;\n          }\n        }\n\n        this.setState({\n          todoDataArray: todoDataArray\n        }, () => this.setState({\n          todo: \"\",\n          index: -1\n        }));\n      } else {\n        //add todo\n        todoDataArray.push({\n          todo: this.state.todo,\n          status: this.state.status,\n          isCompleted: this.state.isCompleted\n        });\n        this.setState({\n          todoDataArray: todoDataArray\n        }, () => this.setState({\n          todo: \"\",\n          index: -1\n        }));\n      }\n    };\n\n    this.getToDoDetail = (e, index) => {\n      this.setState({\n        index: index,\n        todo: this.state.todoDataArray[index].todo\n      });\n    };\n\n    this.state = {\n      activeFilter: 0,\n      index: -1,\n      todo: \"\",\n      status: true,\n      isCompleted: false,\n      todoDataArray: [{\n        todo: \"test\",\n        status: true,\n        isCompleted: false\n      }]\n    };\n  }\n\n  render() {\n    const props = {\n      inputLabel: \"Todo\",\n      inputType: \"text\",\n      inputName: \"todo\",\n      isRequired: true,\n      inputValue: this.state.todo,\n      handleChange: this.handleChange,\n      inputMaxLength: \"30\"\n    };\n    const buttonProps = {\n      buttonType: \"submit\",\n      buttonName: \"Add Todo\",\n      buttonClass: \"buttonClass\"\n    };\n    return React.createElement(\"div\", {\n      className: styles.todoContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: styles.todoForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: e => this.addTodo(e, this.state.index),\n      className: styles.formInline,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(Input, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    })), React.createElement(Button, Object.assign({}, buttonProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })))), React.createElement(ToDoList, {\n      toDos: this.state.todoDataArray,\n      handleOnClick: this.getToDoDetail,\n      updateToDos: arr => this.setState({\n        todoDataArray: arr\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default ToDo;","map":{"version":3,"sources":["/home/gwl/SAMANDAR/react-training/src/Component/ToDo/ToDo.jsx"],"names":["React","styles","Input","Button","ToDoList","ToDo","Component","constructor","props","handleChange","e","setState","target","name","value","addTodo","index","console","log","alert","preventDefault","todoDataArray","state","i","length","todo","push","status","isCompleted","getToDoDetail","activeFilter","render","inputLabel","inputType","inputName","isRequired","inputValue","inputMaxLength","buttonProps","buttonType","buttonName","buttonClass","todoContainer","todoForm","formInline","arr"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styles from \"./ToDo.module.scss\";\nimport Input from \"../Shared/Input\";\nimport Button from \"../Shared/Button\";\nimport ToDoList from \"./ToDoList/ToDoList\";\n/**\n * This component for render todo form todo list\n */\n/** Name: Component name\n *  Desc: Component description\n * @param {fun} handleOnClick\n * @param {boolean} activeFilter\n * @returns Element\n */\nclass ToDo extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            activeFilter: 0,\n            index: -1,\n            todo:\"\",\n            status: true,\n            isCompleted: false,\n            todoDataArray: [{todo:\"test\",status:true,isCompleted:false}]\n        }\n    }\n    handleChange = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n    addTodo = (e ,index)=> { \n        console.log('pooja');\n        alert();\n        e.preventDefault();                    \n        let todoDataArray = [...this.state.todoDataArray]; \n        if(index!==-1){\n            //update todo\n            for(let i=0; i < todoDataArray.length; i++){\n                if(i===index){\n                    todoDataArray[i].todo = this.state.todo;\n                }\n            }\n            this.setState(\n                {\n                    todoDataArray: todoDataArray\n                },() =>  this.setState(\n                    {\n                        todo: \"\",\n                        index: -1\n                    }\n                )            \n            );\n        }else{\n            //add todo\n            todoDataArray.push(\n                {\n                    todo: this.state.todo,\n                    status: this.state.status,\n                    isCompleted: this.state.isCompleted\n                }\n            );\n            this.setState(\n                {\n                    todoDataArray: todoDataArray\n                },() => this.setState(\n                    {\n                        todo: \"\",\n                        index: -1\n                    }\n                )\n            );\n        }  \n    }\n    // get to do details\n    getToDoDetail = (e, index) => {        \n        this.setState({\n            index: index,\n            todo: this.state.todoDataArray[index].todo\n        })\n    } \n    \n    render () {   \n        const props = {\n            inputLabel: \"Todo\",\n            inputType: \"text\",\n            inputName: \"todo\",\n            isRequired: true,\n            inputValue: this.state.todo,\n            handleChange: this.handleChange,\n            inputMaxLength: \"30\"\n        }\n        const buttonProps = {\n            buttonType: \"submit\",\n            buttonName: \"Add Todo\",\n            buttonClass: \"buttonClass\"             \n        }\n        return (            \n            <div className={styles.todoContainer}>                                              \n                <div className={styles.todoForm}>\n                    <form onSubmit={e =>this.addTodo(e, this.state.index)} className={styles.formInline}>\n                        <Input\n                        {...props}\n                        /> \n                        <Button\n                            {...buttonProps}                                                         \n                        />    \n                    </form>\n                </div>\n                <ToDoList \n                    toDos={this.state.todoDataArray}\n                    handleOnClick={this.getToDoDetail}\n                    updateToDos={(arr)=>this.setState({todoDataArray:arr})}\n                />\n            </div>\n        );\n    }\n}\nexport default ToDo;"]},"metadata":{},"sourceType":"module"}