{"ast":null,"code":"var _jsxFileName = \"/home/gwl/Reactjs/react-training/src/Component/ToDo/ToDoList/ToDoList.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./ToDoList.module.scss\";\nimport ToDoElements from \"../ToDoElements\";\nimport ToDoFilter from \"../ToDoFilter\";\n/**\n * This component for render todo list\n * @param {array} toDos // array of objects\n */\n\nclass ToDoList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.updateTodo = (e, index) => {\n      this.props.handleOnClick(e, index);\n    };\n\n    this.removeTodo = todo => {\n      console.log(todo);\n      const _this$props = this.props,\n            toDos = _this$props.toDos,\n            updateToDos = _this$props.updateToDos;\n      const affterDelete = toDos.filter(item => {\n        return item.todo !== todo;\n      });\n      updateToDos(affterDelete);\n    };\n\n    this.updateTodoStatus = (e, index, status) => {\n      let newTodoDataArray = [...this.state.toDos];\n\n      for (let i = 0; i < newTodoDataArray.length; i++) {\n        if (i === index) {\n          newTodoDataArray[i].status = !status;\n        }\n      }\n\n      this.setState({\n        toDos: newTodoDataArray\n      }, () => {\n        this.TodoFilter(\"\", 0);\n      });\n    };\n\n    this.updateTodoCompleteStatus = (e, index, status) => {\n      let newComTodoDataArray = [...this.state.toDos];\n\n      for (let i = 0; i < this.state.toDos.length; i++) {\n        if (i === index) {\n          newComTodoDataArray[i].isCompleted = !status;\n        }\n      }\n\n      this.setState({\n        toDos: newComTodoDataArray\n      });\n    };\n\n    this.TodoFilter = (e, filter) => {\n      let newFilterArr = [...this.state.toDos];\n      let filterData = [];\n\n      if (filter === 0) {\n        // filter get record all\n        filterData = newFilterArr;\n      } else if (filter === 1) {\n        // filter get active record\n        filterData = this.props.toDos.filter(function (todo) {\n          return todo.status !== false;\n        });\n      } else if (filter === 2) {\n        // filter get is completed record\n        filterData = this.props.toDos.filter(function (todo) {\n          return todo.isCompleted !== false;\n        });\n      }\n\n      this.setState({\n        todosArr: filterData,\n        activeFilter: filter\n      });\n    };\n\n    this.state = {\n      toDos: this.props.toDos,\n      activeFilter: 0,\n      todosArr: []\n    };\n  }\n\n  componentDidMount() {\n    this.TodoFilter(\"\", 0);\n  } //receive props\n\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.toDos.length !== prevState.toDos.length) {\n      this.setState({\n        toDos: prevProps.toDos\n      }, () => {\n        this.TodoFilter(\"\", 0);\n      });\n    }\n  } // update todo\n\n\n  render() {\n    const _this$state = this.state,\n          activeFilter = _this$state.activeFilter,\n          todosArr = _this$state.todosArr;\n    return React.createElement(\"div\", {\n      className: styles.todoList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(ToDoFilter, {\n      handleOnClick: this.TodoFilter,\n      activeFilter: activeFilter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Todo\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Status\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Is Completed\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Action\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, todosArr.map((item, itemKey) => {\n      return React.createElement(ToDoElements, {\n        index: itemKey,\n        toDoTitle: item.todo,\n        toDoStatus: item.status,\n        completeToDoStatus: item.isCompleted,\n        updateToDoStatus: this.updateTodoStatus,\n        updateToDoCompleteStatus: this.updateTodoCompleteStatus,\n        updateToDo: this.updateTodo,\n        removeToDo: () => this.removeTodo(item.todo),\n        key: itemKey,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      });\n    }))));\n  }\n\n}\n\nToDoList.defaultProps = {\n  updateToDos: () => {},\n  toDos: [],\n  handleOnClick: () => {}\n};\nToDoList.propTypes = {\n  toDos: PropTypes.array,\n  updateToDos: PropTypes.func.isRequired,\n  handleOnClick: PropTypes.func.isRequired\n};\nexport default ToDoList;","map":{"version":3,"sources":["/home/gwl/Reactjs/react-training/src/Component/ToDo/ToDoList/ToDoList.jsx"],"names":["React","PropTypes","styles","ToDoElements","ToDoFilter","ToDoList","Component","constructor","props","updateTodo","e","index","handleOnClick","removeTodo","todo","console","log","toDos","updateToDos","affterDelete","filter","item","updateTodoStatus","status","newTodoDataArray","state","i","length","setState","TodoFilter","updateTodoCompleteStatus","newComTodoDataArray","isCompleted","newFilterArr","filterData","todosArr","activeFilter","componentDidMount","componentDidUpdate","prevProps","prevState","render","todoList","map","itemKey","defaultProps","propTypes","array","func","isRequired"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./ToDoList.module.scss\";\nimport ToDoElements from \"../ToDoElements\";\nimport ToDoFilter from \"../ToDoFilter\";\n/**\n * This component for render todo list\n * @param {array} toDos // array of objects\n */\nclass ToDoList extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            toDos: this.props.toDos,\n            activeFilter: 0,\n            todosArr :[]\n        }        \n    }\n    componentDidMount(){        \n        this.TodoFilter(\"\",0);\n    }\n    //receive props\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.toDos.length !== prevState.toDos.length) { \n            this.setState({\n                toDos: prevProps.toDos\n            },()=>{\n                this.TodoFilter(\"\",0);\n            });                                  \n        }\n    }\n    // update todo\n    updateTodo = (e, index) => { \n        this.props.handleOnClick(e,index);        \n    };         \n    // remove todo\n    removeTodo = (todo) =>{\n        console.log(todo);\n      \n        const {toDos,updateToDos} = this.props;\n        const affterDelete = toDos.filter(item => {\n            return item.todo !== todo;\n        });\n        updateToDos(affterDelete);\n    }  \n    // update todo status\n    updateTodoStatus = (e, index, status) => {        \n        let newTodoDataArray = [...this.state.toDos]; \n        for(let i = 0; i < newTodoDataArray.length;i++){\n            if(i===index){\n                newTodoDataArray[i].status = !status;\n            }\n        }\n        this.setState({\n            toDos: newTodoDataArray\n        },() => {\n            this.TodoFilter(\"\",0);\n        });\n    }\n    // update todo complete status\n    updateTodoCompleteStatus = (e, index, status) => {       \n        let newComTodoDataArray = [...this.state.toDos]; \n        for(let i = 0; i < this.state.toDos.length;i++){\n            if(i===index){\n                newComTodoDataArray[i].isCompleted = !status;\n            }\n        }\n        this.setState({\n            toDos: newComTodoDataArray\n        });\n    }\n    //todo filter\n    TodoFilter = (e, filter) => {        \n        let newFilterArr = [...this.state.toDos];\n        let filterData = [];\n        if (filter === 0){\n            // filter get record all\n            filterData = newFilterArr;\n        } else if (filter === 1){\n            // filter get active record\n            filterData=this.props.toDos.filter(function(todo){\n                return todo.status !== false;                \n            });\n        } else if (filter === 2){\n            // filter get is completed record\n            filterData = this.props.toDos.filter(function(todo){\n                return todo.isCompleted !== false;\n            });\n        }        \n        this.setState({\n            todosArr: filterData,\n            activeFilter: filter\n        });\n    }\n    render () {\n        const {activeFilter,todosArr} = this.state;        \n        return (            \n            <div className={styles.todoList}>\n                <ToDoFilter \n                handleOnClick={this.TodoFilter}\n                activeFilter={activeFilter}/>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Todo</th>\n                            <th>Status</th>\n                            <th>Is Completed</th>\n                            <th>Action</th>\n                        </tr>                        \n                    </thead>\n                    <tbody>                         \n                        {todosArr.map((item,itemKey) => {\n                            return (\n                                <ToDoElements \n                                index={itemKey}\n                                toDoTitle={item.todo}\n                                toDoStatus={item.status}\n                                completeToDoStatus={item.isCompleted}\n                                updateToDoStatus={this.updateTodoStatus}\n                                updateToDoCompleteStatus={this.updateTodoCompleteStatus}\n                                updateToDo={this.updateTodo}\n                                removeToDo={()=>this.removeTodo(item.todo)}\n                                key={itemKey}\n                                />                            \n                            );\n                        })\n                        } \n                    </tbody>\n                </table>\n            </div>            \n        ); \n    };\n}\nToDoList.defaultProps = {\n    updateToDos: () => {},\n    toDos: [],\n    handleOnClick: () => {}\n}\nToDoList.propTypes = {\n    toDos: PropTypes.array,\n    updateToDos: PropTypes.func.isRequired,\n    handleOnClick: PropTypes.func.isRequired\n}\nexport default ToDoList;"]},"metadata":{},"sourceType":"module"}